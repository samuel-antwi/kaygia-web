generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// User model for authentication and profiles
model User {
  id                 String              @id @default(cuid())
  email              String              @unique
  name               String?
  company            String?
  passwordHash       String?
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  lastLoggedIn       DateTime?
  role               Role                @default(CLIENT)
  projects           Project[]
  passwordResets     PasswordReset[]
  emailVerified      Boolean             @default(false)
  emailVerifications EmailVerification[]
  supportTickets     SupportTicket[]     @relation("ClientTickets") // Tickets opened by the client
  ticketComments     TicketComment[]     // Comments made by the user
}

// Modified Role enum (if you want to keep it for future expansion)
enum Role {
  CLIENT
}

// Project model for client projects
model Project {
  id          String        @id @default(cuid())
  title       String
  description String?       @db.Text
  status      ProjectStatus @default(PENDING)
  clientId    String        // Relation to user
  client      User          @relation(fields: [clientId], references: [id])
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  startDate   DateTime?
  endDate     DateTime?
  type        ProjectType
  budget      Float?
  requirements String?      @db.Text
}

// Project status enum
enum ProjectStatus {
  PENDING
  APPROVED
  IN_PROGRESS
  REVIEW
  COMPLETED
  CANCELLED
}

// Project type enum
enum ProjectType {
  WEBSITE
  E_COMMERCE
  WEB_APP
  MOBILE_APP
  BRANDING
  MARKETING
  OTHER
}

// Contact form messages
model ContactMessage {
  id        String   @id @default(cuid())
  name      String
  email     String
  company   String?
  message   String   @db.Text
  createdAt DateTime @default(now())
  isRead    Boolean  @default(false)
}

// Support Ticket System

model SupportTicket {
  id            String        @id @default(cuid())
  subject       String
  status        TicketStatus  @default(OPEN)
  clientId      String        // ID of the user who opened the ticket
  client        User          @relation("ClientTickets", fields: [clientId], references: [id], onDelete: Cascade)
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt // Automatically updates when comments are added etc.
  comments      TicketComment[] // Relation to comments on this ticket
  lastRepliedAt DateTime      @default(now()) // Tracks the latest activity time
}

model TicketComment {
  id        String        @id @default(cuid())
  content   String        @db.Text
  ticketId  String
  ticket    SupportTicket @relation(fields: [ticketId], references: [id], onDelete: Cascade)
  userId    String        // ID of the user (client or admin) who made the comment
  user      User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  sender    CommentSender // Indicates if CLIENT or ADMIN sent it
  createdAt DateTime      @default(now())
}

enum TicketStatus {
  OPEN      // Newly created or needs attention
  PENDING   // Awaiting response (e.g., from client)
  RESOLVED  // Issue fixed, awaiting confirmation
  CLOSED    // Confirmed resolved and closed
}

enum CommentSender {
  ADMIN
  CLIENT
}

// Password reset model
model PasswordReset {
  id        String   @id @default(cuid())
  token     String   @unique
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  expiresAt DateTime
  createdAt DateTime @default(now())
  used      Boolean  @default(false)
}

// Email verification model
model EmailVerification {
  id        String   @id @default(cuid())
  token     String   @unique
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  expiresAt DateTime
  createdAt DateTime @default(now())
  used      Boolean  @default(false)
}
