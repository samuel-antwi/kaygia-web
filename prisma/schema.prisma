generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// User model for authentication and profiles
model User {
  id                String              @id @default(cuid())
  email             String              @unique
  name              String?
  company           String?
  passwordHash      String?
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  lastLoggedIn      DateTime?
  role              Role                @default(CLIENT)
  projects          Project[]           // Relation to projects
  passwordResets    PasswordReset[]     // Relation to password resets
  emailVerified     Boolean             @default(false)  // Whether email is verified
  emailVerifications EmailVerification[] // Relation to email verifications
}

// Modified Role enum (if you want to keep it for future expansion)
enum Role {
  CLIENT
}

// Project model for client projects
model Project {
  id          String        @id @default(cuid())
  title       String
  description String?       @db.Text
  status      ProjectStatus @default(PENDING)
  clientId    String        // Relation to user
  client      User          @relation(fields: [clientId], references: [id])
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  startDate   DateTime?
  endDate     DateTime?
  type        ProjectType
  budget      Float?
  requirements String?      @db.Text
}

// Project status enum
enum ProjectStatus {
  PENDING
  APPROVED
  IN_PROGRESS
  REVIEW
  COMPLETED
  CANCELLED
}

// Project type enum
enum ProjectType {
  WEBSITE
  E_COMMERCE
  WEB_APP
  MOBILE_APP
  BRANDING
  MARKETING
  OTHER
}

// Contact form messages
model ContactMessage {
  id        String   @id @default(cuid())
  name      String
  email     String
  company   String?
  message   String   @db.Text
  createdAt DateTime @default(now())
  isRead    Boolean  @default(false)
}

// Password reset model
model PasswordReset {
  id        String   @id @default(cuid())
  token     String   @unique
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  expiresAt DateTime
  createdAt DateTime @default(now())
  used      Boolean  @default(false)
}

// Email verification model
model EmailVerification {
  id        String   @id @default(cuid())
  token     String   @unique
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  expiresAt DateTime
  createdAt DateTime @default(now())
  used      Boolean  @default(false)
}
